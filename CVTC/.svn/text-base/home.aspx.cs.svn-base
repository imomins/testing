using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using System.Web.UI;
using System.Web.UI.WebControls;
using System.Collections.ObjectModel;

public partial class home : System.Web.UI.Page
{
    protected void Page_Load(object sender, EventArgs e)
    {
        
        if (!Page.IsPostBack)
        {
            GenerateCalendar();
            GenerateTaskOnCalendar();
            //lbl5.Attributes.Add("class", "selected");
            Initialization();

        }
        
    }
   
    private void Initialization()
    {
        try
        {
            if (Session["CurrentUser"] != null)
            {
                User u = (User)Session["CurrentUser"];
                LabelUserName.Text = u != null ? u.LastName + ", " + u.FirstName : "";
                LabelUserName.Text += "[" + DateTime.Now.ToString() + "]";
                HiddenFieldCurrentUser.Value = u.UserOID.ToString();
            }
        }
        catch (Exception ex)
        { }
    }
    public void GenerateCalendar()
    {

        try
        {
            ///System.DateTime.Now.
            DateTime curDate = DateTime.Now;
            int dayIndex = 0;
            int min;
            string lbl="";
            Label cntl;

            string day=curDate.DayOfWeek.ToString();

            dayIndex = (day == "Monday") ? 1 : dayIndex;
            dayIndex = (day == "Tuesday") ? 2 : dayIndex;
            dayIndex = (day == "Wednesday") ? 3 : dayIndex;
            dayIndex = (day == "Thursday") ? 4 : dayIndex;
            dayIndex = (day == "Friday") ? 5 : dayIndex;
            dayIndex = (day == "Saturday") ? 6 : dayIndex;
            dayIndex = (day == "Sunday") ? 7 : dayIndex;
            

            if (curDate.Day <= 14)
            {
                min = 1;                                
            }
            else if (curDate.Day <= 28)
            {
                min = 15;
            }
            else
            {
                min = 29;
            }

            lbl = "Label" + dayIndex.ToString();
            cntl = (Label)Page.FindControl(lbl);
            cntl.Text = curDate.Day.ToString();            
            //cntl.BackColor = System.Drawing.Color.Red;

            if (dayIndex == 1) lbl1.Attributes.Add("class", "selected");
            else if (dayIndex == 2) lbl2.Attributes.Add("class", "selected");
            else if (dayIndex == 3) lbl3.Attributes.Add("class", "selected");
            else if (dayIndex == 4) lbl4.Attributes.Add("class", "selected");
            else if (dayIndex == 5) lbl5.Attributes.Add("class", "selected");
            else if (dayIndex == 6) lbl6.Attributes.Add("class", "selected");
            else if (dayIndex == 7) lbl7.Attributes.Add("class", "selected");
            else if (dayIndex == 8) lbl8.Attributes.Add("class", "selected");
            else if (dayIndex == 9) lbl9.Attributes.Add("class", "selected");
            else if (dayIndex == 10) lbl10.Attributes.Add("class", "selected");
            else if (dayIndex == 11) lbl11.Attributes.Add("class", "selected");
            else if (dayIndex == 12) lbl12.Attributes.Add("class", "selected");
            else if (dayIndex == 13) lbl13.Attributes.Add("class", "selected");
            else if (dayIndex == 14) lbl14.Attributes.Add("class", "selected");
            


            min = curDate.Day;

            for (int i = dayIndex-1; i >0; i--)
            {
                min--;
                min = (min) % (System.DateTime.DaysInMonth(curDate.Year, curDate.Month) + 1);
                if (min == 0) min = 1;
                lbl = "Label" + i.ToString();
                cntl = (Label)Page.FindControl(lbl);
                cntl.Text = min.ToString();
                
                
            }
            min = curDate.Day;
            for (int i = dayIndex + 1; i <=14; i++)
            {
                min++;
                min = (min) % (System.DateTime.DaysInMonth(curDate.Year, curDate.Month) + 1);
                if (min == 0) min = 1;
                lbl = "Label" + i.ToString();
                cntl = (Label)Page.FindControl(lbl);
                cntl.Text = min.ToString();

            }

            //HyperLink lb = new HyperLink();
            //lb.ID = "lb2";
            //lb.Text = "testing";
            //lb.NavigateUrl = @"pg/task/DisplayTask.aspx?taskOID=5&keepThis=true&TB_iframe=true&height=460&width=600";
            //lb.CssClass = "thickbox";
            //lb.BorderStyle = BorderStyle.Solid;
            //PlaceHolder2.Controls.Add(lb);
            //PlaceHolder2.Controls.Add(InsertLineBreaks(1));
            //lb = new HyperLink();
            //lb.ID = "lb2";
            //lb.Text = "Inter";
            //lb.BorderStyle = BorderStyle.Solid;
            //lb.NavigateUrl = @"pg/task/DisplayTask.aspx?taskOID=5&keepThis=true&TB_iframe=true&height=460&width=600";
            //lb.CssClass = "thickbox";
            //PlaceHolder2.Controls.Add(lb);
             
        }
        catch (Exception ex)
        { }
    }

    private void GenerateTaskOnCalendar()
    {
        try
        {
            Collection<Task> _taskList = null;
            Task task = new Task();
            string lbl = "";
            DateTime curDate = DateTime.Now;
            DateTime start = DateTime.Now.Date;
            DateTime end = DateTime.Now.Date.AddDays(1).AddMilliseconds(-1);
            PlaceHolder cntl;
            HyperLink hplk;
            int dayIndex = 0,min,userOID=0;
            string day = curDate.DayOfWeek.ToString();
            User currentUser; 

            if (Session["CurrentUser"] != null)
            {
                currentUser = (User)Session["CurrentUser"];
                userOID = currentUser.UserOID;
            }


            dayIndex = (day == "Monday") ? 1 : dayIndex;
            dayIndex = (day == "Tuesday") ? 2 : dayIndex;
            dayIndex = (day == "Wednesday") ? 3 : dayIndex;
            dayIndex = (day == "Thursday") ? 4 : dayIndex;
            dayIndex = (day == "Friday") ? 5 : dayIndex;
            dayIndex = (day == "Saturday") ? 6 : dayIndex;
            dayIndex = (day == "Sunday") ? 7 : dayIndex;

            //For Current Date
            lbl = "PlaceHolder" + dayIndex.ToString();
            cntl = (PlaceHolder)Page.FindControl(lbl);
            _taskList = null;
            _taskList = task.GetTaskByStartAndEndDateUOID(start, end, userOID);
            //For Each task on this date
            foreach (Task t in _taskList)
            {
                hplk = new HyperLink();
                hplk.ID = "hplk" + t.TaskOID.ToString() + "_" + dayIndex.ToString();
                hplk.Text = t.Subject;
                hplk.NavigateUrl = @"pg/task/DisplayTask.aspx?taskOID=" + t.TaskOID.ToString() + "&keepThis=true&TB_iframe=true&height=460&width=600";
                hplk.CssClass = "thickbox";                
                cntl.Controls.Add(hplk);
                cntl.Controls.Add(InsertLineBreaks(1));
                
            }


            min = curDate.Day;
            for (int i = dayIndex - 1; i > 0; i--)
            {
                //Add Task
                min--;
                min = (min) % (System.DateTime.DaysInMonth(curDate.Year, curDate.Month) + 1);
                if (min == 0) min = 1;
                lbl = "PlaceHolder" + i.ToString();
                cntl = (PlaceHolder)Page.FindControl(lbl);

                start = start.AddDays(-1);
                end = end.AddDays(-1);
                _taskList = null;
                _taskList = task.GetTaskByStartAndEndDateUOID(start, end, userOID);
                
                //For Each task on this date
                foreach (Task t in _taskList)
                {
                    hplk = new HyperLink();
                    hplk.ID = "hplk" + t.TaskOID.ToString()+"_"+i.ToString(); 
                    hplk.Text = t.Subject;
                    hplk.NavigateUrl = @"pg/task/DisplayTask.aspx?taskOID=" + t.TaskOID.ToString() + "&keepThis=true&TB_iframe=true&height=460&width=600";
                    hplk.CssClass = "thickbox";                    
                    cntl.Controls.Add(hplk);
                    cntl.Controls.Add(InsertLineBreaks(1));
                    
                }
            }

            min = curDate.Day;
            start = DateTime.Now.Date;
            end = DateTime.Now.Date.AddDays(1).AddMilliseconds(-1);
            for (int i = dayIndex + 1; i <= 14; i++)
            { 
                //Add task
                min++;
                min = (min) % (System.DateTime.DaysInMonth(curDate.Year, curDate.Month) + 1);
                if (min == 0) min = 1;
                lbl = "PlaceHolder" + i.ToString();
                cntl = (PlaceHolder)Page.FindControl(lbl);

                _taskList = null;
                start = start.AddDays(1);
                end = end.AddDays(1);
                _taskList = task.GetTaskByStartAndEndDateUOID(start, end, userOID);
               
                //For Each task on this date
                foreach (Task t in _taskList)
                {
                    hplk = new HyperLink();
                    hplk.ID = "hplk" + t.TaskOID.ToString() + "_" + i.ToString();
                    hplk.Text = t.Subject;
                    hplk.NavigateUrl = @"pg/task/DisplayTask.aspx?taskOID=" + t.TaskOID.ToString() + "&keepThis=true&TB_iframe=true&height=460&width=600";
                    hplk.CssClass = "thickbox";                    
                    cntl.Controls.Add(hplk);
                    cntl.Controls.Add(InsertLineBreaks(1));
                }
            }
        }
        catch (Exception ex){ 
        
        }
        
    }

    protected void Button1_Click(object sender, EventArgs e)
    {
        //Response.Redirect("hello.aspx");
    }
    private static Label InsertLineBreaks(int breaks)
    {
        Label lblLineBreak = new Label();

        for (int i = 0; i < breaks; i++)
        {
            lblLineBreak.Text += "<br/>";
        }
        return lblLineBreak;
    }
    protected void ButtonRefresh_Click(object sender, EventArgs e)
    {
        try
        {
            GenerateCalendar();
            GenerateTaskOnCalendar();
            //lbl5.Attributes.Add("class", "selected");
            Initialization();
        }
        catch (Exception ex)
        { }
    }
}
